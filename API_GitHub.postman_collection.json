{
	"info": {
		"_postman_id": "429040a1-9ec7-4236-ba38-75d7215c0d6f",
		"name": "API GitHub",
		"description": "# GitHub API collection\n\nThis collection gathers the main GitHub APIs used by the Dolibarr GitConnector module, especially for release automation.\n\n## How to use the collection\n\nA maximum number of values are stored in variables, so that you don't have to re-enter everything at each route.\n\nSome variables are already saved in this collection directly, such as the base GitHub API URL, but others you have to set yourself, along with your values.\n\nTo do this, you need to create a new environment in Postman, called GitHub API for exemple, and select it. Then, go on a route of this collection, and, for variables that are not yet defined, enter you value, and save it in your environment.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37102888"
	},
	"item": [
		{
			"name": "User Repositories List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field exists and is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(repo) {",
							"        pm.expect(repo.id).to.exist.and.to.be.a('number');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Owner object is present with expected fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(repo) {",
							"        pm.expect(repo.owner).to.exist;",
							"        pm.expect(repo.owner).to.be.an('object');",
							"        pm.expect(repo.owner).to.have.property('login');",
							"        pm.expect(repo.owner).to.have.property('id');",
							"        pm.expect(repo.owner).to.have.property('avatar_url');",
							"        pm.expect(repo.owner).to.have.property('html_url');",
							"        pm.expect(repo.owner).to.have.property('site_admin');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the 'permissions' object has the required permissions fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(repo) {",
							"        pm.expect(repo.permissions).to.be.an('object');",
							"        pm.expect(repo.permissions).to.have.property('admin');",
							"        pm.expect(repo.permissions).to.have.property('maintain');",
							"        pm.expect(repo.permissions).to.have.property('push');",
							"        pm.expect(repo.permissions).to.have.property('triage');",
							"        pm.expect(repo.permissions).to.have.property('pull');",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					},
					{
						"key": "visibility",
						"value": "private",
						"type": "text"
					},
					{
						"key": "affiliation",
						"value": "owner",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/user/repos",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"user",
						"repos"
					]
				},
				"description": "Retrieve the list of repositories for the user"
			},
			"response": []
		},
		{
			"name": "Repository",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Owner object should exist and be of type 'object'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.owner).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Permissions object has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.permissions).to.be.an('object');",
							"    pm.expect(responseData.permissions).to.have.property('admin');",
							"    pm.expect(responseData.permissions).to.have.property('maintain');",
							"    pm.expect(responseData.permissions).to.have.property('push');",
							"    pm.expect(responseData.permissions).to.have.property('triage');",
							"    pm.expect(responseData.permissions).to.have.property('pull');",
							"});",
							"",
							"",
							"pm.test(\"Topics array should be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.topics).to.be.an('array').that.is.empty;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}"
					]
				},
				"description": "Retrieve repository details"
			},
			"response": []
		},
		{
			"name": "Repo Pull Requests List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"User object in the response should exist and be an object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(pullRequest) {",
							"        pm.expect(pullRequest.user).to.exist.and.to.be.an('object');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Base object contains expected properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(pullRequest) {",
							"        pm.expect(pullRequest.base).to.be.an('object');",
							"        pm.expect(pullRequest.base.label).to.exist;",
							"        pm.expect(pullRequest.base.ref).to.exist;",
							"        pm.expect(pullRequest.base.sha).to.exist;",
							"        pm.expect(pullRequest.base.user).to.exist;",
							"        pm.expect(pullRequest.base.repo).to.exist;",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Title field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(pullRequest) {",
							"        pm.expect(pullRequest.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true,
					"connection": true,
					"accept-encoding": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/pulls?state=all&base=main&per_page=10&page=2",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"pulls"
					],
					"query": [
						{
							"key": "state",
							"value": "all",
							"description": "pull requests state: all | closed | open"
						},
						{
							"key": "base",
							"value": "main",
							"description": "filter on base branch name"
						},
						{
							"key": "per_page",
							"value": "10",
							"description": "limit number of result"
						},
						{
							"key": "page",
							"value": "2",
							"description": "page number of result to fetch"
						}
					]
				},
				"description": "Retrieve list of pull requests for the repository"
			},
			"response": []
		},
		{
			"name": "Branches",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the array of branches\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(branch) {",
							"        pm.expect(branch).to.be.an('object');",
							"        pm.expect(branch.name).to.be.a('string');",
							"        pm.expect(branch.commit).to.be.an('object');",
							"        pm.expect(branch.commit.sha).to.be.a('string');",
							"        pm.expect(branch.commit.url).to.be.a('string');",
							"        pm.expect(branch).to.have.property('protected').that.is.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Each branch has a non-empty name, a commit with a non-empty sha, and a non-empty url\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(function(branch) {",
							"        pm.expect(branch.name).to.exist.and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"        pm.expect(branch.commit.sha).to.exist.and.to.have.lengthOf.at.least(1, \"Commit sha should not be empty\");",
							"        pm.expect(branch.commit.url).to.exist.and.to.have.lengthOf.at.least(1, \"Commit url should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Protected field is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(branch) {",
							"        pm.expect(branch.protected).to.be.a('boolean');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/branches",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"branches"
					],
					"query": [
						{
							"key": "protected",
							"value": "yes",
							"description": "return protected or unprotected branches by rulesets or branch protection\nomit to get all branches",
							"disabled": true
						},
						{
							"key": "per_page",
							"value": "2",
							"description": "limit number of result",
							"disabled": true
						},
						{
							"key": "page",
							"value": "5",
							"description": "page number of result to fetch",
							"disabled": true
						}
					]
				},
				"description": "Retrieve the list of available branches for the repository"
			},
			"response": []
		},
		{
			"name": "Branch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Name field should not be empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Commit object is present in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('commit');",
							"});",
							"",
							"",
							"pm.test(\"Author and committer objects have non-empty name, email, and date fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.commit.author.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    pm.expect(responseData.commit.author.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"    pm.expect(responseData.commit.author.date).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Date should not be empty\");",
							"",
							"    pm.expect(responseData.commit.committer.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"    pm.expect(responseData.commit.committer.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"    pm.expect(responseData.commit.committer.date).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Date should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/branches/main",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"branches",
						"main"
					],
					"query": [
						{
							"key": "protected",
							"value": "yes",
							"description": "return protected or unprotected branches by rulesets or branch protection\nomit to get all branches",
							"disabled": true
						},
						{
							"key": "per_page",
							"value": "2",
							"description": "limit number of result",
							"disabled": true
						},
						{
							"key": "page",
							"value": "5",
							"description": "page number of result to fetch",
							"disabled": true
						}
					]
				},
				"description": "Get details on a specific branch"
			},
			"response": []
		},
		{
			"name": "Branch",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ref\": \"refs/heads/test_branch_from_api\", // to create a new branch named test_branch_from_api\n    \"sha\": \"96c24e87119dd4b6d7f76cbcffac1106439db3d9\" // commit sha to use for the new ref\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/git/refs",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"git",
						"refs"
					]
				},
				"description": "API endpoint to create new GitHub ref.\n\nThis could be a new branch or a new label, depending on ref name"
			},
			"response": []
		},
		{
			"name": "ChangeLog Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Name field must be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Size field is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.size).to.be.a('number');",
							"    pm.expect(responseData.size).to.be.at.least(0, \"Size should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Verify _links object is present and contains expected links\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData._links).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData._links.self).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData._links.git).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData._links.html).to.exist.and.to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/contents/ChangeLog.md",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"contents",
						"ChangeLog.md"
					]
				},
				"description": "Retrieve the ChangeLog.md details and file content"
			},
			"response": []
		},
		{
			"name": "Module Descriptor Content",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist;",
							"    pm.expect(responseData.path).to.exist;",
							"    pm.expect(responseData.sha).to.exist;",
							"    pm.expect(responseData.size).to.exist;",
							"    pm.expect(responseData.url).to.exist;",
							"    pm.expect(responseData.html_url).to.exist;",
							"    pm.expect(responseData.git_url).to.exist;",
							"    pm.expect(responseData.download_url).to.exist;",
							"    pm.expect(responseData.type).to.exist;",
							"    pm.expect(responseData.content).to.exist;",
							"    pm.expect(responseData.encoding).to.exist;",
							"    pm.expect(responseData._links).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Verify the content is either empty or in a specific format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.content).to.satisfy((content) => {",
							"        return content === \"\" || /^[\\w\\d\\+\\/=]*$/.test(content);",
							"    }, \"Content should be either empty or in base64 format\");",
							"});",
							"",
							"",
							"pm.test(\"Url, html_url, and git_url are valid URLs\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.url).to.match(/^https?:\\/\\/\\S+$/);",
							"    pm.expect(responseData.html_url).to.match(/^https?:\\/\\/\\S+$/);",
							"    pm.expect(responseData.git_url).to.match(/^https?:\\/\\/\\S+$/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/contents/core/modules/modEnjoyHolidays.class.php",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"contents",
						"core",
						"modules",
						"modEnjoyHolidays.class.php"
					]
				},
				"description": "Retrieve the module descriptor details and content"
			},
			"response": []
		},
		{
			"name": "Update ChangeLog content",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"Update ChangeLog.md for new release X.X\",  // Commit message\n    \"content\": \"IyBDSEFOR0VMT0cgRU5KT1lIT0xJREFZUyBGT1IgW0RPTElCQVJSIEVSUCBDUk1dKGh0dHBzOi8vd3d3LmRvbGliYXJyLm9yZykKCiMjIEFVVE8gUkVMRUFTRSBURVNUCgotIE5ldzogRnJvbSBHaXRIdWIgQVBJIHRvIG1ha2UgYW4gQVBJIHRlc3QKCiMjIFJlbGVhc2UgMS4xMwoKLSBORVc6IEFkZCBuZXcgQ1JPTiB0byBkZWxldGUgb2xkIG5vbi12YWxpZGF0ZWQgdHJhdmVsIHBhY2thZ2VzLCBldmVyeSBkYXkKCiMjIFJlbGVhc2UgMS4xMgoKLSBORVc6IEFkZCBuZXcgZGVmYXVsdCBjb250YWN0IGZvciB0cmF2ZWwgcGFja2FnZXMgLSAqMjAyNC0wMy0yNyogMS4xMgoKIyMgUmVsZWFzZSAxLjExCgotIE5FVzogQ3JlYXRlIG5ldyBUcmF2ZWxQYWNrYWdlIEFQSSB0byBnZXQgbGlzdCBvZiBhbGwgdHJhdmVsIHBhY2thZ2VzIC0gKjIwMjQtMDMtMjcqIC0gMS4xMQoKIyMgUmVsZWFzZSAxLjEwCgotIE5FVzogQWRkIGV4cG9ydCBhbmQgaW1wb3J0IGZ1bmN0aW9uIGZvciBUcmF2ZWxQYWNrYWdlIC0gKjIwMjQtMDMtMjYqIC0gMS4xMAoKIyMgUmVsZWFzZSAxLjkKCi0gTkVXOiBDcmVhdGUgbmV3IFBEZiBtb2RlbCBmb3IgcHJvcGFsLCB3aXRoIHRoZSBzcGVjaWZpYyBtZW50aW9uIGV4dHJhZmllbGRzIC0gKjIwMjQtMDMtMjYqIDEuOQoKIyMgUmVsZWFzZSAxLjgKCi0gTkVXOiBDcmVhdGUgZXh0cmFmaWVsZHMgZm9yIHByb3BhbCBhbmQgcHJvcGFsTGluZTogU3BlY2lmaWMgbWVudGlvbiwgYW5kIE1hbmFnZXIgLSAqMjAyNC0wMy0yNSogMS44CgojIyBSZWxlYXNlIDEuNwoKLSBORVc6IEFkZCBuZXcgYnV0dG9uIHRvIGNyZWF0ZSBhIG5ldyBUcmF2ZWxQYWNrYWdlIGxpbmtlZCB0byBhIHByb3BhbCAtICoyMDI0LTAzLTI1KiAxLjcKLSBTYXZlIGxpbmsgYmV0d2VlbiB0aGUgYm90aCwgYW5kIGRlbGV0aW5nIG9uZSBzaWRlIHdpbGwgZGVsZXRlIHRoZSBvdGhlciBvbmUKCiMjIFJlbGVhc2UgMS42CgotIE5FVzogVXBkYXRlcyB0aGUgdHJhdmVsIGFtb3VudCB3aGVuIHNlbGVjdGluZyB0aGUgZGVzdGluYXRpb24gY291bnRyeSAtICoyMDI0LTAzLTIwKiAxLjYKCiMjIFJlbGVhc2UgMS41CgotIE5FVzogQ3JlYXRlIGEgbmV3IG1vZHVsZSBjb25mIHRvIHNldCBhIGRlZmF1bHQgYW1vdW50IGZvciB0cmF2ZWwgcGFja2FnZXMgLSAqMjAyNC0wMy0xOSogMS41Ci0gQ3JlYXRlIGEgbmV3IGRpY3Rpb25hcnkgdG8gZGVmaW5lIGEgZGVmYXVsdCBhbW91bnQgZm9yIGVhY2ggY291bnRyeQotIFNldCBuZXcgdHJhdmVsIHBhY2thZ2UgYW1vdW50IHdpdGggYSBkZWZhdWx0IG9uZSBpZiBubyBvbmUgaXMgZ2l2ZW4KCiMjIFJlbGVhc2UgMS40CgotIE5FVzogQ3JlYXRlIGJveCB0byBkaXNwbGF5IGxhdGVzdCB0cmF2ZWwgcGFja2FnZXMgLSAqMjAyNC0wMy0xOSogMS40CgojIyBSZWxlYXNlIDEuMwoKLSBORVc6IEVuYWJsZSByaWdodHMgY2hlY2sgZm9yIHRyYXZlbCBwYWNrYWdlcyAtICoyMDI0LTAzLTE4KiAxLjMKCiMjIFJlbGVhc2UgMS4yCgotIE5FVzogQWRkIG1pbmltdW0gbGVuZ3RoIHRvIFRyYXZlbFBhY2thZ2Ugb2JqZWN0IGxhYmVscyAtICoyMDI0LTAzLTE4KiAxLjIKCgojIyBSZWxlYXNlIDEuMQoKLSBORVc6IEFkZCBUcmF2ZWxQYWNrYWdlIG9iamVjdCwgd2l0aCBpdHMgQ1JVRCAtICoyMDI0LTAzLTE1KiAxLjEgCgogCiMjIDEuMAoKSW5pdGlhbCB2ZXJzaW9u\",\n    \"sha\": \"c62e2ea94d0426f610973b1fba4effe121fc0bcf\" // Blob SHA of the file being replaced\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/contents/ChangeLog.md",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"contents",
						"ChangeLog.md"
					]
				},
				"description": "API endpoint to update new the ChangeLog.md."
			},
			"response": []
		},
		{
			"name": "Update Module Version",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "{{github-api-accept}}",
						"type": "text"
					},
					{
						"key": "X-GitHub-Api-Version",
						"value": "{{github-api-version}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"Update module version for new release X.X\",  // Commit message\n    \"content\": \"PD9waHAKCi8qIFRoaXMgaXMgYSB0ZXN0IGNvbnRlbnQgZnJvbSB0aGUgQVBJCiogWW91IGNhbiByZXZlcnQgdGhlIGNvbW1pdCB0byByZWNvdmVyIHRoZSBvcmlnaW5hbCBtb2R1bGUgZGVzY3JpcHRvciBjb250ZW50Ciov\",\n    \"sha\": \"0c064c29a4dae770056f3e95318113f6d56cc75c\" // Blob SHA of the file being replaced\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base-url}}/repos/{{owner}}/{{repo}}/contents/core/modules/modEnjoyHolidays.class.php",
					"host": [
						"{{base-url}}"
					],
					"path": [
						"repos",
						"{{owner}}",
						"{{repo}}",
						"contents",
						"core",
						"modules",
						"modEnjoyHolidays.class.php"
					]
				},
				"description": "API endpoint to update new the module descriptor of the module"
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Bearer token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "github-api-version",
			"value": "2022-11-28",
			"type": "default"
		},
		{
			"key": "github-api-accept",
			"value": "application/vnd.github+json",
			"type": "default"
		},
		{
			"key": "base-url",
			"value": "https://api.github.com",
			"type": "string"
		}
	]
}